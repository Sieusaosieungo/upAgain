/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shoesmanagementcompany;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.TableRowAlign;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import shoesmanagementcompany.*;

/**
 *
 * @author Pham Ngoc Minh
 */
public class Import extends javax.swing.JPanel {

    /**
     * Creates new form Export
     */
    public Import() {
        initComponents();
        getListToCombo();
        //tableImport2.setEnabled(false); //chưa load bảng 1 thì bảng 2 ko được phép can thiệp

        /**
         * ngăn quyền truy cập tới các button khi chưa load CSDL
         */
        exportFile.setEnabled(false);
        insertData1.setEnabled(false);
        editData1.setEnabled(false);
        clearData1.setEnabled(false);

        insertData2.setEnabled(false);
        editData2.setEnabled(false);
        clearData2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        employeeCombo = new javax.swing.JComboBox<>();
        createDay = new javax.swing.JTextField();
        inputInvoice = new javax.swing.JTextField();
        supplierCombo = new javax.swing.JComboBox<>();
        receiveDay = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        productCombo = new javax.swing.JComboBox<>();
        productName = new javax.swing.JLabel();
        quantity = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableImport1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableImport2 = new javax.swing.JTable();
        jToolBar4 = new javax.swing.JToolBar();
        exportFile = new javax.swing.JButton();
        jToolBar5 = new javax.swing.JToolBar();
        viewData1 = new javax.swing.JButton();
        jToolBar6 = new javax.swing.JToolBar();
        insertData1 = new javax.swing.JButton();
        editData1 = new javax.swing.JButton();
        clearData1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        employeeName = new javax.swing.JLabel();
        supplierName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbInputInvoice = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jToolBar1 = new javax.swing.JToolBar();
        insertData2 = new javax.swing.JButton();
        editData2 = new javax.swing.JButton();
        clearData2 = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        cost = new javax.swing.JLabel();
        properties = new javax.swing.JComboBox<>();
        searchBox = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1220, 710));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1150, 710));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 102, 255));
        jLabel18.setText("Mã hoá đơn nhập");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 102, 255));
        jLabel20.setText("Ngày lập");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 102, 255));
        jLabel21.setText("Mã nhân viên");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 102, 255));
        jLabel23.setText("Mã nhà cung cấp");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 102, 255));
        jLabel24.setText("Ngày nhập hàng");

        employeeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn mã nhân viên" }));
        employeeCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeComboMouseClicked(evt);
            }
        });
        employeeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeComboActionPerformed(evt);
            }
        });

        createDay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        inputInvoice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputInvoiceActionPerformed(evt);
            }
        });

        supplierCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn mã nhà cung cấp" }));
        supplierCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                supplierComboMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                supplierComboMouseEntered(evt);
            }
        });
        supplierCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboActionPerformed(evt);
            }
        });

        receiveDay.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 102, 255));
        jLabel28.setText("Mã hoá đơn nhập");

        jLabel85.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel85.setForeground(new java.awt.Color(0, 102, 255));
        jLabel85.setText("Mã sản phẩm");

        jLabel89.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel89.setForeground(new java.awt.Color(0, 102, 255));
        jLabel89.setText("Tên sản phẩm");

        jLabel86.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel86.setForeground(new java.awt.Color(0, 102, 255));
        jLabel86.setText("Số lượng");

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel87.setForeground(new java.awt.Color(0, 102, 255));
        jLabel87.setText("Thành tiền");

        productCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn mã sản phẩm" }));
        productCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productComboMouseClicked(evt);
            }
        });
        productCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productComboActionPerformed(evt);
            }
        });

        productName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productName.setText("Tên sản phẩm");

        quantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        quantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityActionPerformed(evt);
            }
        });

        tableImport1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableImport1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã Hoá đơn nhập", "Mã nhà cung cấp", "Mã nhân viên", "Ngày lập", "Ngày nhập hàng"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableImport1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableImport1.setRowHeight(25);
        tableImport1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableImport1MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tableImport1);

        tableImport2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tableImport2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Mã hóa đơn nhập", "Mã sản phẩm", "Số lượng", "Thành tiền"
            }
        ));
        tableImport2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableImport2.setRowHeight(25);
        tableImport2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableImport2MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableImport2);

        jToolBar4.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar4.setRollover(true);

        exportFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/IconColor/icons8_Microsoft_Word_37px.png"))); // NOI18N
        exportFile.setToolTipText("Xuất file");
        exportFile.setOpaque(false);
        exportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFileActionPerformed(evt);
            }
        });
        jToolBar4.add(exportFile);

        jToolBar5.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar5.setRollover(true);

        viewData1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/Icon/icons8_Refresh_37px.png"))); // NOI18N
        viewData1.setToolTipText("Hiển thị bảng và reset lại đầu vào");
        viewData1.setFocusable(false);
        viewData1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewData1.setOpaque(false);
        viewData1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewData1ActionPerformed(evt);
            }
        });
        jToolBar5.add(viewData1);

        jToolBar6.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar6.setRollover(true);

        insertData1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/IconColor/icons8_Add_Database_37px.png"))); // NOI18N
        insertData1.setToolTipText("Thêm hoá đơn nhập");
        insertData1.setOpaque(false);
        insertData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertData1ActionPerformed(evt);
            }
        });
        jToolBar6.add(insertData1);

        editData1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/Icon/edit 37.png"))); // NOI18N
        editData1.setToolTipText("Sửa hoá đơn nhập");
        editData1.setFocusable(false);
        editData1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editData1.setOpaque(false);
        editData1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editData1ActionPerformed(evt);
            }
        });
        jToolBar6.add(editData1);

        clearData1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/IconColor/icons8_Delete_Database_37px.png"))); // NOI18N
        clearData1.setToolTipText("Xoá hoá đơn nhập");
        clearData1.setFocusable(false);
        clearData1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearData1.setOpaque(false);
        clearData1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearData1ActionPerformed(evt);
            }
        });
        jToolBar6.add(clearData1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setText("Tên nhân viên");

        employeeName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        employeeName.setText("Tên nhân viên");

        supplierName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        supplierName.setText("Tên nhà cung cấp");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 255));
        jLabel4.setText("Tên nhà cung cấp");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 0, 51));
        jLabel5.setText("Chi tiết hóa đơn nhập");

        lbInputInvoice.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbInputInvoice.setText("Mã hóa đơn nhập");

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);

        insertData2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/Icon/insert 37.2.png"))); // NOI18N
        insertData2.setToolTipText("Thêm hoá đơn chi tiết nhập");
        insertData2.setFocusable(false);
        insertData2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        insertData2.setOpaque(false);
        insertData2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        insertData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertData2ActionPerformed(evt);
            }
        });
        jToolBar1.add(insertData2);

        editData2.setBackground(new java.awt.Color(255, 255, 255));
        editData2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/Icon/edit 37 . 2.png"))); // NOI18N
        editData2.setToolTipText("Sửa hoá đơn chi tiết nhập");
        editData2.setFocusable(false);
        editData2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editData2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editData2ActionPerformed(evt);
            }
        });
        jToolBar1.add(editData2);

        clearData2.setBackground(new java.awt.Color(255, 255, 255));
        clearData2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/Icon/remove 37.2.png"))); // NOI18N
        clearData2.setToolTipText("Xoá hoá đơn chi tiết nhập");
        clearData2.setFocusable(false);
        clearData2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearData2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearData2ActionPerformed(evt);
            }
        });
        jToolBar1.add(clearData2);

        jToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar2.setRollover(true);

        cost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        properties.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        properties.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tìm kiếm theo", "Mã hoá đơn nhập", "Mã nhà cung cấp", "Mã nhân viên", "Mã sản phẩm", "Ngày nhập hàng" }));
        properties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesActionPerformed(evt);
            }
        });

        searchBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchBoxMouseEntered(evt);
            }
        });
        searchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToolBar6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1))
                                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(32, 32, 32)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(receiveDay, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(createDay, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(supplierName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(employeeCombo, javax.swing.GroupLayout.Alignment.LEADING, 0, 74, Short.MAX_VALUE))))
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel18)
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(32, 32, 32)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(inputInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel85, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel89, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel86, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel87, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbInputInvoice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                                    .addComponent(productCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 75, Short.MAX_VALUE)
                                    .addComponent(productName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                    .addComponent(quantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                    .addComponent(cost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(properties, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(499, 499, 499))))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel18, jLabel20, jLabel21, jLabel23, jLabel24, jLabel4});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {createDay, employeeCombo, employeeName, inputInvoice, receiveDay, supplierCombo});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel28, jLabel85, jLabel86, jLabel87, jLabel89});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cost, lbInputInvoice, productCombo, productName, quantity});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jToolBar5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToolBar4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToolBar6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(properties, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(supplierCombo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(supplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(employeeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createDay, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receiveDay, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbInputInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel86, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cost))))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cost, createDay, employeeCombo, employeeName, inputInvoice, lbInputInvoice, productCombo, productName, quantity, receiveDay, supplierCombo, supplierName});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel18, jLabel20, jLabel21, jLabel23, jLabel24, jLabel4});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel28, jLabel85, jLabel86, jLabel87, jLabel89});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1220, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void productComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productComboActionPerformed
        Connection connection = ConnectionDB.getConnect();
        String sql = " SELECT tenSP FROM quanlybangiay.sanpham where maSP ='" + productCombo.getSelectedItem().toString() + "';";

        try {
            PreparedStatement pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                productName.setText(rs.getString("tenSP"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_productComboActionPerformed

    /**
     * Lấy tên Nhà cung cấp
     *
     * @param maNCC
     * @return
     */
    public String getTenNCC(String maNCC) {
        String tenNCC = null;
        String sql = "SELECT tenNCC "
                + "FROM  nhacungcap "
                + "WHERE maNCC = '" + maNCC + "';";
        PreparedStatement ps = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            ps = connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tenNCC = rs.getString("tenNCC");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return tenNCC;
    }

    /**
     * Lấy ten nhân viên
     *
     * @param maNV
     * @return
     */
    public String getTenNV(String maNV) {
        String tenNV = null;
        String sql = "SELECT hoTen "
                + "FROM  nhanvien "
                + "WHERE MaNV = '" + maNV + "';";
        PreparedStatement ps = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            ps = connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tenNV = rs.getString("hoTen");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return tenNV;
    }
    
    /**
     * Lấy tên sản phẩm từ mã sản phẩm
     * @param maNCC
     * @return 
     */
    public String getTenSP(String maSP) {
        String tenSP = null;
        String sql = "SELECT tenSP "
                + "FROM  sanpham "
                + "WHERE maSP = '" + maSP + "';";
        PreparedStatement ps = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            ps = connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tenSP = rs.getString("tenSP");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        }
        return tenSP;
    }

    /*------------------------------------------- Xuất File --------------------------------------------------*/
    // Xuất hoá đơn nhập
    public void xuatPhieu(XWPFDocument doc, String fileName) {
        try {
            InputStream file = new FileInputStream(fileName);
            Iterator bodyElementIterator = doc.getBodyElementsIterator();

            for (XWPFParagraph p : doc.getParagraphs()) {
                List<XWPFRun> runs = p.getRuns();
                if (runs != null) {
                    for (XWPFRun r : runs) {
                        r.setFontSize(12);
                        r.setFontFamily("Times New Roman");
                        String text = r.getText(0);
                        if (text != null) {
                            if (text.contains("HDN")) {
                                text = text.replace("HDN", tableImport1.getValueAt(0, 0).toString() + "      ");                               
                                r.addBreak();
                                r.setText(text, 0);
                            }

                            if (text.contains("NCC")) {
                                text = text.replace("NCC", "                       Mã nhà cung cấp: "
                                        + tableImport1.getValueAt(0, 1).toString() + "                            "
                                        + "Tên nhà cung cấp: "
                                        + getTenNCC(tableImport1.getValueAt(0, 1).toString()));
                                r.addBreak();
                                r.setText(text, 0);

                            }

                            if (text.contains("NVx")) {
                                text = text.replace("NVx", "                       Mã nhân viên: "
                                        + tableImport1.getValueAt(0, 2).toString() + "                                       "
                                        + "Tên nhân viên: "
                                        + getTenNV(tableImport1.getValueAt(0, 2).toString()));
                                r.addBreak();
                                r.setText(text, 0);

                            }

                            if (text.contains("yyyyMMDD")) {
                                text = text.replace("yyyyMMDD", "                       Ngày lập: "
                                        + tableImport1.getValueAt(0, 3).toString() + "                                   "
                                        + "Ngày nhận hàng: "
                                        + tableImport1.getValueAt(0, 4).toString());
                                System.out.println("" + text);
                                r.addBreak();
                                r.setText(text, 0);
                            }
                            if (text.contains("tiencpxxx")) {
                                int tongSoTien = 0;

                                for (int i = 0; i < tableImport2.getRowCount(); i++) {
                                    tongSoTien += Integer.parseInt(tableImport2.getValueAt(i, 3).toString());
                                }
                                text = text.replace("tiencpxxx", "                        Tổng số tiền: " + tongSoTien);
                                r.addBreak();
                                r.setText(text, 0);
                                break;
                            }
                            if (text.contains("ngayxxx")) {
                                SimpleDateFormat day = new SimpleDateFormat("dd");
                                SimpleDateFormat month = new SimpleDateFormat("MM");
                                SimpleDateFormat year = new SimpleDateFormat("yyyy");
                                Date date = new Date();
                                String ngay = day.format(date);
                                String thang = month.format(date);
                                String nam = year.format(date);
                                text = text.replace("ngayxxx", "Ngày  " + ngay + "  Tháng  " + thang + "  Năm  " + nam);
                                r.setText(text, 0);
                                break;
                            }
                        }
                    }
                }
            }

            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();
                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    //Danh sách tất cả Table trong file word
                    List<XWPFTable> tableList = element.getBody().getTables();
                    for (XWPFTable table : tableList) {
                        //Căn bảng ở giữa file
                        table.setTableAlignment(TableRowAlign.CENTER);

                        //  Xóa các dòng thừa trước khi thêm mới
                        while (table.getRow(1) != null) {
                            table.removeRow(1);
                        }
                        //Thêm các dòng từ jTable vào table trong word
                        for (int i = 1; i <= tableImport2.getRowCount(); i++) {

                            XWPFTableRow newRow = table.createRow();
                            newRow.getCell(0).setText(i + "");
                            newRow.getCell(1).setText(tableImport2.getValueAt(i - 1, 0).toString());
                            newRow.getCell(2).setText(tableImport2.getValueAt(i - 1, 1).toString());
                            newRow.getCell(3).setText(getTenSP(tableImport2.getValueAt(i - 1, 1).toString()));
                            newRow.getCell(4).setText(tableImport2.getValueAt(i - 1, 2).toString());
                            newRow.getCell(5).setText(tableImport2.getValueAt(i - 1, 3).toString());

                        }
                    }
                }
            }

            OutputStream fOut = new FileOutputStream("Hoá đơn nhập.docx");
            doc.write(fOut);
            fOut.close();
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage());
            Logger.getLogger(Import.class.getName()).log(Level.SEVERE, null, ex);
        }

        String fileOut = System.getProperty("user.home")
                + "\\Documents\\NetBeansProjects\\ShoesManagementCompany\\"
                + "Hoá đơn nhập.docx";
        try {
            File myFile = new File(fileOut);
            Desktop.getDesktop().open(myFile);
        } catch (IOException ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage());
            ex.printStackTrace();
        }
    }
    private void exportFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFileActionPerformed
        String fileName = null;
        String f0 = System.getProperty("user.home");
        String f1 = "\\Documents\\NetBeansProjects\\ShoesManagementCompany\\Quản Lý Nhập\\";
        String f2 = null;
        String sql = null;
        
        if(properties.getSelectedItem().toString().equals("Tìm kiếm theo") || searchBox.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Bạn phải chọn tiêu chuẩn tìm kiếm");
            return;
        }
        
        if (properties.getSelectedItem().toString().equals("Mã hoá đơn nhập")) {
            f2 = "Hoá đơn nhập.docx";
        } else if (properties.getSelectedItem().toString().equals("Mã nhà cung cấp")) {           

            f2 = "Tìm kiếm theo mã nhà cung cấp.docx";
            sql = "SELECT A.maHDN, maSP, maNCC, maNV, ngayNhanHang, ngayLap, soLuong, thanhTien\n"
                    + "from hoadonnhap A join hoadonchitietnhap B \n"
                    + "on A.maHDN = B.maHDN \n"
                    + "where A.maNCC = \"" + searchBox.getText() + "\";";

        } else if (properties.getSelectedItem().toString().equals("Mã nhân viên")) {
            //JOptionPane.showMessageDialog(null, "OK");

            f2 = "Tìm kiếm theo mã nhân viên.docx";
            sql = "SELECT A.maHDN, maSP, maNCC, maNV, ngayNhanHang, ngayLap, soLuong, thanhTien\n"
                    + "from hoadonnhap A join hoadonchitietnhap B \n"
                    + "on A.maHDN = B.maHDN \n"
                    + "where A.maNV = \"" + searchBox.getText() + "\";";

        } else if (properties.getSelectedItem().toString().equals("Mã sản phẩm")) {

            f2 = "Tìm kiếm theo mã sản phẩm.docx";
            sql = "SELECT A.maHDN, maSP, maNCC, maNV, ngayNhanHang, ngayLap, soLuong, thanhTien\n"
                    + "from hoadonnhap A join hoadonchitietnhap B \n"
                    + "on A.maHDN = B.maHDN \n"
                    + "where B.maSP = \"" + searchBox.getText() + "\";";

        } else if (properties.getSelectedItem().toString().equals("Ngày nhập hàng")) {

            f2 = "Tìm kiếm theo ngày nhập hàng.docx";
            sql = "SELECT A.maHDN, maSP, maNCC, maNV, ngayNhanHang, ngayLap, soLuong, thanhTien\n"
                    + "from hoadonnhap A join hoadonchitietnhap B \n"
                    + "on A.maHDN = B.maHDN \n"
                    + "where A.ngayNhanHang = \"" + searchBox.getText() + "\";";

        }

        fileName = f0 + f1 + f2;

        try {
            InputStream file = new FileInputStream(fileName);
            XWPFDocument docx = new XWPFDocument(OPCPackage.open(file));
            Iterator bodyElementIterator = docx.getBodyElementsIterator();
            //Nếu là xuất phiếu mượn thì sửa form
            if (f2.equals("Hoá đơn nhập.docx")) {
                xuatPhieu(docx, fileName);
            } else {
                for (XWPFParagraph p : docx.getParagraphs()) {
                    List<XWPFRun> runs = p.getRuns();
                    if (runs != null) {
                        for (XWPFRun r : runs) {
                            r.setFontSize(12);
                            r.setFontFamily("Times New Roman");
                            String text = r.getText(0);
                            if (text != null) {
                                if (text.contains("ngayxxx")) {
                                    SimpleDateFormat day = new SimpleDateFormat("dd");
                                    SimpleDateFormat month = new SimpleDateFormat("MM");
                                    SimpleDateFormat year = new SimpleDateFormat("yyyy");
                                    Date date = new Date();
                                    String ngay = day.format(date);
                                    String thang = month.format(date);
                                    String nam = year.format(date);
                                    text = text.replace("ngayxxx", "Ngày  " + ngay + "  Tháng  " + thang + "  Năm  " + nam);
                                    r.setText(text, 0);
                                    break;
                                }
                            }
                        }
                    }
                }

                while (bodyElementIterator.hasNext()) {
                    IBodyElement element = (IBodyElement) bodyElementIterator.next();
                    if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                        //Danh sách tất cả Table trong file word
                        List<XWPFTable> tableList = element.getBody().getTables();
                        for (XWPFTable table : tableList) {
                            //Căn bảng ở giữa file
                            table.setTableAlignment(TableRowAlign.CENTER);
                            //  Xóa các dòng thừa trước khi thêm mới
                            while (table.getRow(1) != null) {
                                table.removeRow(1);
                            }
                            int i = 0;
                            //Thêm các dòng từ jTable vào table trong word
                            PreparedStatement ps = null;
                            Connection connection = ConnectionDB.getConnect();
                            try {
                                ps = connection.prepareStatement(sql);
                                ResultSet rs = ps.executeQuery();
                                while (rs.next()) {
                                    XWPFTableRow newRow = table.createRow();
                                    newRow.getCell(0).setText(++i + "");
                                    for (int j = 1; j < 9; j++) {

                                        newRow.getCell(j).setText(rs.getString(j));
                                    }
                                }
                            } catch (SQLException ex) {
                                Logger.getLogger(Import.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    }
                }
                OutputStream fOut = new FileOutputStream(f2);
                docx.write(fOut);
                fOut.close();
                //Mở file
                try {
                    File myFile = new File(f0 + "\\Documents\\NetBeansProjects\\ShoesManagementCompany\\" + f2);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                    JOptionPane.showConfirmDialog(null, ex.getMessage());
                    ex.printStackTrace();
                }
            }
        } catch (IOException | InvalidFormatException ex) {
            JOptionPane.showConfirmDialog(null, ex.getMessage());
            Logger.getLogger(Import.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportFileActionPerformed

    /**
     * Kiểm tra xem khoá chính nhập vào có bị trùng với khoá đã có không Hàm này
     * có thể dùng cho nhiều bảng, riêng bảng chi tiet thì cần check cả 2 khoá
     *
     * @param table : bảng cần kiểm tra
     * @param input : đầu vào khoá chính
     */
    public void checkAdd(JTable table, JTextField input) {
        TableModel model = table.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 1; j++) {
                if (input.getText().equals(model.getValueAt(i, j).toString())) {
                    JOptionPane.showMessageDialog(null, "Khoá chính này đã tồn tại ! Đề nghị bạn nhập lại !");
                    return;
                }
            }
        }
    }

    public void checkAddHoaDonChiTietNhap() {
        TableModel model = tableImport2.getModel();
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < 1; j++) {
                if (lbInputInvoice.getText().equals(model.getValueAt(i, j).toString())
                        && productCombo.getSelectedItem().toString().equals(model.getValueAt(i, 1))) {
                    JOptionPane.showMessageDialog(null, "Khoá chính này đã tồn tại ! Đề nghị bạn nhập lại !");
                    return;
                }
            }
        }
    }

    /**
     * Lấy các dữ liệu đầu vào cho HoaDonNhap
     *
     * @return đối tượng hoaDonNhap
     */
    public entity.HoaDonNhap getInputHoaDonNhap() {
        String maHDN = inputInvoice.getText();
        String maNCC = supplierCombo.getSelectedItem().toString();
        String maNV = employeeCombo.getSelectedItem().toString();
        String ngayLap = createDay.getText();
        String ngayNhanHang = receiveDay.getText();

        entity.HoaDonNhap hoaDonNhap = new entity.HoaDonNhap(maHDN, maNCC, maNV, ngayLap, ngayNhanHang);
        return hoaDonNhap;
    }

    /**
     * Lấy các dữ liệu đầu vào cho HoaDonChiTietNhap
     *
     * @return đối tượng hoaDonNhap
     */
    public entity.HoaDonChiTietNhap getInputHoaDonChiTietNhap() {
        String maHDN = lbInputInvoice.getText();
        String maSP = productCombo.getSelectedItem().toString();
        int soLuong = Integer.parseInt(quantity.getText());
        Connection connection = ConnectionDB.getConnect();
        String sql = " SELECT donGiaNhap FROM quanlybangiay.sanpham where maSP ='" + maSP + "';";

        int donGiaNhap = 0;
        try {
            PreparedStatement pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                donGiaNhap = Integer.parseInt(rs.getString("donGiaNhap"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        int thanhTien = donGiaNhap * soLuong;

        entity.HoaDonChiTietNhap hoaDonChiTietNhap = new entity.HoaDonChiTietNhap(maHDN, maSP, soLuong, thanhTien);
        return hoaDonChiTietNhap;
    }

    /**
     * Thêm dữ liệu hoadonnhap vào database
     *
     * @param hoaDonNhap
     */
    public void insertHoaDonNhapToDB(entity.HoaDonNhap hoaDonNhap) {
        String sqlCommand = "INSERT INTO `quanlybangiay`.`hoadonnhap` "
                + "(`maHDN`, `maNCC`, `maNV`, `ngayLap`, `ngayNhanHang`) "
                + "VALUES (?, ?, ?, ?, ?);";
        PreparedStatement pst = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            pst = connection.prepareStatement(sqlCommand);
            pst.setString(1, hoaDonNhap.getMaHDN());
            pst.setString(2, hoaDonNhap.getMaNCC());
            pst.setString(3, hoaDonNhap.getMaNV());
            pst.setString(4, hoaDonNhap.getNgayLap());
            pst.setString(5, hoaDonNhap.getNgayNhanHang());

            if (pst.executeUpdate() > 0) {

            } else {
                JOptionPane.showMessageDialog(null, "Thêm thất bại !");
            }
        } catch (SQLException e1) {
            JOptionPane.showMessageDialog(null, "Thêm thất bại ! Xin kiểm tra lại !");
        }
    }

    public void insertHoaDonChiTietNhapToDB(entity.HoaDonChiTietNhap hoaDonChiTietNhap) {
        String sqlCommand = "INSERT INTO `quanlybangiay`.`hoadonchitietnhap` "
                + "(`maHDN`, `maSP`, `soLuong`, `thanhTien`) "
                + "VALUES (?, ?, ?, ?);";
        PreparedStatement pst = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            pst = connection.prepareStatement(sqlCommand);
            pst.setString(1, hoaDonChiTietNhap.getMaHDN());
            pst.setString(2, hoaDonChiTietNhap.getMaSP());
            pst.setInt(3, hoaDonChiTietNhap.getSoLuong());
            pst.setInt(4, hoaDonChiTietNhap.getThanhTien());

            if (pst.executeUpdate() > 0) {

            } else {
                JOptionPane.showMessageDialog(null, "Không thể thêm ! Xin kiểm tra lại !");
            }
        } catch (SQLException e1) {
            // TODO Auto-generated catch block
            JOptionPane.showMessageDialog(null, "Không thể thêm ! Xin kiểm tra lại !");
        }
    }

    private void insertData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertData1ActionPerformed
        checkAdd(tableImport1, inputInvoice);
        entity.HoaDonNhap hoaDonNhap = this.getInputHoaDonNhap();
        insertHoaDonNhapToDB(hoaDonNhap);

        loadDataToTable(tableImport1);
        resetInputImport();
    }//GEN-LAST:event_insertData1ActionPerformed

    private void clearData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearData1ActionPerformed
        int row = tableImport1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Bạn phải chọn 1 hàng trong bảng", "Error Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int select = JOptionPane.showOptionDialog(null, "Bạn có muốn xóa?", "Delete", 0, JOptionPane.YES_NO_OPTION, null, null, 1);
        if (select == 0) {
            PreparedStatement pst = null;
            String sqlCommand = "delete from hoadonnhap where MaHDN = ?";
            try {
                Connection connection = ConnectionDB.getConnect();
                pst = connection.prepareStatement(sqlCommand);
                pst.setString(1, (String) tableImport1.getValueAt(row, 0));

                if (pst.executeUpdate() > 0) {

                } else {
                    JOptionPane.showMessageDialog(null, "Xoá thất bại !");
                }
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                JOptionPane.showMessageDialog(null, "Xoá thất bại ! (Có thể do dữ liệu này còn ở bảng khác) ! Xin kiểm tra lại ");
            }

            loadDataToTable(tableImport1);
        }
        resetInputImport();
    }//GEN-LAST:event_clearData1ActionPerformed

    private void employeeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeComboActionPerformed
        Connection connection = ConnectionDB.getConnect();
        String sql = " SELECT hoTen FROM quanlybangiay.nhanvien where MaNV ='" + employeeCombo.getSelectedItem().toString() + "';";

        try {
            PreparedStatement pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                employeeName.setText(rs.getString("hoTen"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_employeeComboActionPerformed

    private void quantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityActionPerformed

    private void inputInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputInvoiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputInvoiceActionPerformed

    /**
     * load dữ liệu từ database tới các bảng Import
     *
     * @param table (tableImport1 || tableImport2)
     */
    public void loadDataToTable(JTable table) {
        if (table.equals(tableImport1)) {
            DefaultTableModel tableModel = (DefaultTableModel) tableImport1.getModel();
            tableModel.setNumRows(0);
            String sql1 = "SELECT * FROM quanlybangiay.hoadonnhap";
            PreparedStatement pst;
            Connection connection = ConnectionDB.getConnect();
            int row = 0;
            try {
                pst = connection.prepareStatement(sql1);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                        rs.getString(3), rs.getString(4), rs.getString(5)
                    });
                    inserted[row] = true;
                    row++;
                }
                tableImport1.setModel(tableModel);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error: " + ex.getErrorCode());
            }
        }
        if (table.equals(tableImport2)) {
            DefaultTableModel tableModel = (DefaultTableModel) tableImport2.getModel();
            tableModel.setNumRows(0);
            String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap";
            PreparedStatement pst;
            Connection connection = ConnectionDB.getConnect();
            int row = 0;
            try {
                pst = connection.prepareStatement(sql);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                        rs.getString(3), rs.getString(4)
                    });
                    inserted[row] = true;
                    row++;
                }
                tableImport2.setModel(tableModel);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error: " + ex.getErrorCode());
            }
        }
    }

    /**
     * reset toàn bộ dữ liệu đầu vào chức năng Import
     */
    public void resetInputImport() {
        inputInvoice.setText("");
        supplierCombo.setSelectedItem("Chọn mã nhà cung cấp");
        supplierName.setText("");
        employeeCombo.setSelectedItem("Chọn mã nhân viên");
        employeeName.setText("");
        createDay.setText("");
        receiveDay.setText("");

        lbInputInvoice.setText("");
        productCombo.setSelectedItem("Chọn mã sản phẩm");
        productName.setText("");
        quantity.setText("");
        cost.setText("");
    }
    private void viewData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewData1ActionPerformed
        /**
         * kích hoạt các nút button
         */
        exportFile.setEnabled(true);
        insertData1.setEnabled(true);
        editData1.setEnabled(true);
        clearData1.setEnabled(true);

        insertData2.setEnabled(true);
        editData2.setEnabled(true);
        clearData2.setEnabled(true);
        /**
         * set lại cho bảng tableImport2 không thể đụng vào
         */
        //tableImport2.setEnabled(false);

        /**
         * Load dữ liệu ra cho bảng hoadonnhap
         */
        loadDataToTable(tableImport1);

        /**
         * load dữ liệu ra cho bảng hoadonchitietnhap
         */
        loadDataToTable(tableImport2);

        /**
         * reset lại toàn bộ các đầu vào
         */
        resetInputImport();

    }//GEN-LAST:event_viewData1ActionPerformed

    private void insertData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertData2ActionPerformed
        if (lbInputInvoice.getText().equals("") || productCombo.getSelectedItem().equals("Chọn mã sản phẩm") || quantity.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Không thể thêm ! Xem lại !");
            return;
        }
        checkAddHoaDonChiTietNhap();
        entity.HoaDonChiTietNhap hoaDonChiTietNhap = this.getInputHoaDonChiTietNhap();
        insertHoaDonChiTietNhapToDB(hoaDonChiTietNhap);

        /**
         * load ra dữ liệu của bảng hoadonchitietnhap nhưng chỉ xuất theo khoá
         * đang xét
         */
        DefaultTableModel tableModel = (DefaultTableModel) tableImport2.getModel();
        tableModel.setNumRows(0);
        String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap where maHDN ='" + lbInputInvoice.getText().toString() + "';";
        PreparedStatement pst;
        Connection connection = ConnectionDB.getConnect();

        int row = 0;
        try {
            pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4)
                });
                inserted[row] = true;
                row++;
            }
            tableImport2.setModel(tableModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getErrorCode());
        }

        productName.setText("");
        quantity.setText("");
        cost.setText("");

    }//GEN-LAST:event_insertData2ActionPerformed

    /**
     * Cập nhật hoá đơn nhập
     *
     * @param hoaDonNhap
     * @return true nếu update thành công
     */
    public boolean updateHoaDonNhap(entity.HoaDonNhap hoaDonNhap) {
        String sqlCommand = "update hoadonnhap"
                + " set MaHDN = ?, "
                + "MaNCC = ?, "
                + "MaNV = ?, "
                + "ngayLap = ?, "
                + "ngayNhanHang = ? "
                + "where MaHDN = ?";

        PreparedStatement pst = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            pst = connection.prepareStatement(sqlCommand);
            pst.setString(1, hoaDonNhap.getMaHDN());
            pst.setString(2, hoaDonNhap.getMaNCC());
            pst.setString(3, hoaDonNhap.getMaNV());
            pst.setString(4, hoaDonNhap.getNgayLap());
            pst.setString(5, hoaDonNhap.getNgayNhanHang());
            pst.setString(6, lbInputInvoice.getText().toString());

            if (pst.executeUpdate() > 0) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException e3) {
            // TODO Auto-generated catch block
            System.out.println("update lỗi nhé ! " + e3.getMessage());
        }
        return false;
    }

    public boolean updateHoaDonChiTietNhap(entity.HoaDonChiTietNhap hoaDonChiTietNhap) {
        String sqlCommand = "update hoadonchitietnhap "
                + "set MaHDN = ?, "
                + "MaSP = ?, "
                + "soLuong = ?, "
                + "thanhTien = ? "
                + "where (MaHDN = ?) AND (MaSP = ?);";

        PreparedStatement pst = null;
        Connection connection = ConnectionDB.getConnect();
        try {
            pst = connection.prepareStatement(sqlCommand);
            pst.setString(1, hoaDonChiTietNhap.getMaHDN());
            pst.setString(2, hoaDonChiTietNhap.getMaSP());
            pst.setInt(3, hoaDonChiTietNhap.getSoLuong());
            pst.setInt(4, hoaDonChiTietNhap.getThanhTien());

            pst.setString(5, lbInputInvoice.getText());
            pst.setString(6, productCombo.getSelectedItem().toString());

            if (pst.executeUpdate() > 0) {
                return true;
            } else {
                return false;
            }
        } catch (SQLException e3) {
            // TODO Auto-generated catch block
            System.out.println("update lỗi nhé ! " + e3.toString());
        }
        return false;
    }
    private void editData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editData1ActionPerformed
        int row = tableImport1.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Bạn phải chọn 1 hàng trong bảng", "Error Update", JOptionPane.ERROR_MESSAGE);
            return;
        }
        entity.HoaDonNhap hoaDonNhap = getInputHoaDonNhap();
        if (updateHoaDonNhap(hoaDonNhap)) {
            JOptionPane.showMessageDialog(null, "Update thành công");
        } else {
            JOptionPane.showMessageDialog(null, "Update thất bại");
        }

        loadDataToTable(tableImport1);
        resetInputImport();
    }//GEN-LAST:event_editData1ActionPerformed

    private void employeeComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeComboMouseClicked


    }//GEN-LAST:event_employeeComboMouseClicked

    private void supplierComboMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplierComboMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_supplierComboMouseEntered

    private void supplierComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_supplierComboMouseClicked

    }//GEN-LAST:event_supplierComboMouseClicked

    private void productComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productComboMouseClicked

    }//GEN-LAST:event_productComboMouseClicked

    private void tableImport1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableImport1MouseClicked

        //tableImport2.setEnabled(true);
        int row = tableImport1.getSelectedRow();
        inputInvoice.setText((String) tableImport1.getValueAt(row, 0));
        createDay.setText((String) tableImport1.getValueAt(row, 3));
        employeeCombo.setSelectedItem((String) tableImport1.getValueAt(row, 2));
        supplierCombo.setSelectedItem((String) tableImport1.getValueAt(row, 1));
        receiveDay.setText((String) tableImport1.getValueAt(row, 4));
        lbInputInvoice.setText((String) tableImport1.getValueAt(row, 0));

        DefaultTableModel tableModel = (DefaultTableModel) tableImport2.getModel();
        tableModel.setNumRows(0);
        String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap where maHDN ='" + lbInputInvoice.getText().toString() + "';";
        PreparedStatement pst;
        Connection connection = ConnectionDB.getConnect();

        row = 0;
        try {
            pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4)
                });
                inserted[row] = true;
                row++;
            }
            tableImport2.setModel(tableModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getErrorCode());
        }

        productName.setText("");
        quantity.setText("");
        cost.setText("");
    }//GEN-LAST:event_tableImport1MouseClicked

    private void tableImport2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableImport2MouseClicked

        int row2 = tableImport2.getSelectedRow();
        if (lbInputInvoice.getText().equals("")) {
            lbInputInvoice.setText((String) tableImport2.getValueAt(row2, 0));
        }

        productCombo.setSelectedItem((String) tableImport2.getValueAt(row2, 1));
        quantity.setText((String) tableImport2.getValueAt(row2, 2));
        cost.setText((String) tableImport2.getValueAt(row2, 3));
    }//GEN-LAST:event_tableImport2MouseClicked

    private void supplierComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboActionPerformed
        Connection connection = ConnectionDB.getConnect();
        String sql = " SELECT tenNCC FROM quanlybangiay.nhacungcap where maNCC ='" + supplierCombo.getSelectedItem().toString() + "';";

        try {
            PreparedStatement pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                supplierName.setText(rs.getString("tenNCC"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_supplierComboActionPerformed

    private void clearData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearData2ActionPerformed
        /**
         * Xoá dữ liệu trong bảng hoadonchitietnhap
         */
        int row = tableImport2.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Bạn phải chọn 1 hàng trong bảng", "Error Delete", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int select = JOptionPane.showOptionDialog(null, "Bạn có muốn xóa?", "Delete", 0, JOptionPane.YES_NO_OPTION, null, null, 1);
        if (select == 0) {
            PreparedStatement pst = null;
            String sqlCommand = "delete from hoadonchitietnhap where MaHDN = ?&& maSP = ?";
            try {
                Connection connection = ConnectionDB.getConnect();
                pst = connection.prepareStatement(sqlCommand);

                pst.setString(1, (String) tableImport2.getValueAt(row, 0));
                pst.setString(2, (String) tableImport2.getValueAt(row, 1));

                if (pst.executeUpdate() > 0) {

                } else {
                    JOptionPane.showConfirmDialog(null, "Xoá thất bại! Xin kiểm tra lại!");
                }
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                JOptionPane.showConfirmDialog(null, "Xoá thất bại! Xin kiểm tra lại!");
            }

        }
        /**
         * load ra dữ liệu của bảng hoadonchitietnhap nhưng chỉ xuất theo khoá
         * đang xét
         */
        DefaultTableModel tableModel = (DefaultTableModel) tableImport2.getModel();
        tableModel.setNumRows(0);
        String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap where maHDN ='" + lbInputInvoice.getText().toString() + "';";

        PreparedStatement pst;
        Connection connection = ConnectionDB.getConnect();

        row = 0;
        try {
            pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4)
                });
                inserted[row] = true;
                row++;
            }
            tableImport2.setModel(tableModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getErrorCode());
        }
    }//GEN-LAST:event_clearData2ActionPerformed

    private void editData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editData2ActionPerformed
        int row = tableImport2.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Bạn phải chọn 1 hàng trong bảng", "Error Update", JOptionPane.ERROR_MESSAGE);
            return;
        }
        entity.HoaDonChiTietNhap hoaDonChiTietNhap = getInputHoaDonChiTietNhap();
        if (updateHoaDonChiTietNhap(hoaDonChiTietNhap)) {
            JOptionPane.showMessageDialog(null, "Update thành công");
        } else {
            JOptionPane.showMessageDialog(null, "Update thất bại");
        }

        DefaultTableModel tableModel = (DefaultTableModel) tableImport2.getModel();
        tableModel.setNumRows(0);
        String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap where maHDN ='" + lbInputInvoice.getText().toString() + "';";

        PreparedStatement pst;
        Connection connection = ConnectionDB.getConnect();

        row = 0;
        try {
            pst = connection.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                tableModel.addRow(new Object[]{rs.getString(1), rs.getString(2),
                    rs.getString(3), rs.getString(4)
                });
                inserted[row] = true;
                row++;
            }
            tableImport2.setModel(tableModel);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getErrorCode());
        }

        productCombo.setSelectedItem("Chọn mã sản phẩm");
        productName.setText("");
        quantity.setText("");
        cost.setText("");
    }//GEN-LAST:event_editData2ActionPerformed

    private void searchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBoxActionPerformed

    }//GEN-LAST:event_searchBoxActionPerformed

    private void propertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesActionPerformed
        exportFile.setEnabled(true);
        if (searchBox.getText().equals("")) {
            return;
        }
        JComboBox<String> combo = (JComboBox<String>) evt.getSource();
        String selected = (String) combo.getSelectedItem();
        ConnectionDB connectionDB = new ConnectionDB();
        Connection con = connectionDB.getConnect();
        if (selected != null) {
            switch (selected) {
                case "Mã hoá đơn nhập": {
                    try {
                        ((DefaultTableModel) tableImport1.getModel()).setNumRows(0);
                        String sql = "SELECT * FROM quanlybangiay.hoadonnhap WHERE maHDN like '%" + searchBox.getText() + "%'";
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                            Vector<String> vector = new Vector<>();
                            for (int i = 0; i < 5; i++) {
                                vector.add(rs.getString(i + 1));
                            }
                            ((DefaultTableModel) tableImport1.getModel()).addRow(vector);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        ((DefaultTableModel) tableImport2.getModel()).setNumRows(0);
                        String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap WHERE maHDN like '%" + searchBox.getText() + "%'";
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                            Vector<String> vector = new Vector<>();
                            for (int i = 0; i < 4; i++) {
                                vector.add(rs.getString(i + 1));
                            }
                            ((DefaultTableModel) tableImport2.getModel()).addRow(vector);
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }

                case "Mã nhà cung cấp": {
                    String[] maHDN = new String[100];
                    int count = 0;
                    try {
                        ((DefaultTableModel) tableImport1.getModel()).setNumRows(0);
                        String sql = "SELECT * FROM quanlybangiay.hoadonnhap WHERE maNCC like '%" + searchBox.getText() + "%'";
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                            maHDN[count] = rs.getString("maHDN");
                            Vector<String> vector = new Vector<>();
                            for (int i = 0; i < 5; i++) {
                                vector.add(rs.getString(i + 1));
                            }
                            ((DefaultTableModel) tableImport1.getModel()).addRow(vector);

                            count++;
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        DefaultTableModel table = ((DefaultTableModel) tableImport2.getModel());
                        table.setNumRows(0);
                        for (int k = 0; k < count; k++) {

                            String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap WHERE maHDN like '%" + maHDN[k] + "%'";
                            Statement st = con.createStatement();
                            ResultSet rs = st.executeQuery(sql);
                            while (rs.next()) {
                                Vector<String> vector = new Vector<>();
                                for (int i = 0; i < 4; i++) {
                                    vector.add(rs.getString(i + 1));
                                }
                                table.addRow(vector);
                            }

                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }

                case "Mã nhân viên": {
                    String[] maHDN = new String[100];
                    int count = 0;
                    try {
                        ((DefaultTableModel) tableImport1.getModel()).setNumRows(0);
                        String sql = "SELECT * FROM quanlybangiay.hoadonnhap WHERE maNV like '%" + searchBox.getText() + "%'";
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                            maHDN[count] = rs.getString("maHDN");
                            Vector<String> vector = new Vector<>();
                            for (int i = 0; i < 5; i++) {
                                vector.add(rs.getString(i + 1));
                            }
                            ((DefaultTableModel) tableImport1.getModel()).addRow(vector);

                            count++;
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        DefaultTableModel table = ((DefaultTableModel) tableImport2.getModel());
                        table.setNumRows(0);
                        for (int k = 0; k < count; k++) {

                            String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap WHERE maHDN like '%" + maHDN[k] + "%'";
                            Statement st = con.createStatement();
                            ResultSet rs = st.executeQuery(sql);
                            while (rs.next()) {
                                Vector<String> vector = new Vector<>();
                                for (int i = 0; i < 4; i++) {
                                    vector.add(rs.getString(i + 1));
                                }
                                table.addRow(vector);
                            }

                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }

                case "Mã sản phẩm": {
                    String[] maHDN = new String[100];
                    int count = 0;
                    try {
                        ((DefaultTableModel) tableImport2.getModel()).setNumRows(0);
                        String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap WHERE maSP like '%" + searchBox.getText() + "%'";
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                            maHDN[count] = rs.getString("maHDN");
                            Vector<String> vector = new Vector<>();
                            for (int i = 0; i < 4; i++) {
                                vector.add(rs.getString(i + 1));
                            }
                            ((DefaultTableModel) tableImport2.getModel()).addRow(vector);

                            count++;
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        DefaultTableModel table = ((DefaultTableModel) tableImport1.getModel());
                        table.setNumRows(0);
                        for (int k = 0; k < count; k++) {

                            String sql = "SELECT * FROM quanlybangiay.hoadonnhap WHERE maHDN like '%" + maHDN[k] + "%'";
                            Statement st = con.createStatement();
                            ResultSet rs = st.executeQuery(sql);
                            while (rs.next()) {
                                Vector<String> vector = new Vector<>();
                                for (int i = 0; i < 5; i++) {
                                    vector.add(rs.getString(i + 1));
                                }
                                table.addRow(vector);
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }

                case "Ngày nhập hàng": {
                    String[] maHDN = new String[100];
                    int count = 0;
                    try {
                        ((DefaultTableModel) tableImport1.getModel()).setNumRows(0);
                        String sql = "SELECT * FROM quanlybangiay.hoadonnhap WHERE ngayNhanHang like '%" + searchBox.getText() + "%'";
                        Statement st = con.createStatement();
                        ResultSet rs = st.executeQuery(sql);
                        while (rs.next()) {
                            maHDN[count] = rs.getString("maHDN");
                            Vector<String> vector = new Vector<>();
                            for (int i = 0; i < 5; i++) {
                                vector.add(rs.getString(i + 1));
                            }
                            ((DefaultTableModel) tableImport1.getModel()).addRow(vector);

                            count++;
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    try {
                        DefaultTableModel table = ((DefaultTableModel) tableImport2.getModel());
                        table.setNumRows(0);
                        for (int k = 0; k < count; k++) {

                            String sql = "SELECT * FROM quanlybangiay.hoadonchitietnhap WHERE maHDN like '%" + maHDN[k] + "%'";
                            Statement st = con.createStatement();
                            ResultSet rs = st.executeQuery(sql);
                            while (rs.next()) {
                                Vector<String> vector = new Vector<>();
                                for (int i = 0; i < 4; i++) {
                                    vector.add(rs.getString(i + 1));
                                }
                                table.addRow(vector);
                            }

                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
            }
        }
    }//GEN-LAST:event_propertiesActionPerformed

    private void searchBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBoxMouseEntered

    }//GEN-LAST:event_searchBoxMouseEntered

    /**
     * đưa các dữ liệu từ các bảng đơn tới comboBox
     */
    public void getListToCombo() {
        ConnectionDB conn = new ConnectionDB();
        Connection c = conn.getConnect();
        String sql1 = " SELECT MaNV FROM quanlybangiay.nhanvien;";
        String sql2 = " SELECT MaNCC FROM quanlybangiay.nhacungcap;";
        String sql3 = " SELECT MaSP FROM quanlybangiay.sanpham;";
        try {
            PreparedStatement pst1 = c.prepareStatement(sql1);
            PreparedStatement pst2 = c.prepareStatement(sql2);
            PreparedStatement pst3 = c.prepareStatement(sql3);
            ResultSet rs1 = pst1.executeQuery();
            while (rs1.next()) {
                employeeCombo.addItem(rs1.getString("MaNV"));
            }

            ResultSet rs2 = pst2.executeQuery();
            while (rs2.next()) {
                supplierCombo.addItem(rs2.getString("MaNCC"));
            }

            ResultSet rs3 = pst3.executeQuery();
            while (rs3.next()) {
                productCombo.addItem(rs3.getString("MaSP"));
            }
        } catch (Exception e) {
        }
    }

    private boolean isEmptyRow(int row) {
        DefaultTableModel tableModel = (DefaultTableModel) tableImport1.getModel();
        for (int i = 0; i < tableImport1.getColumnCount(); i++) {
            String data = (String) tableImport1.getValueAt(row, i);
            if (data == null) {
                return true;
            }
        }
        return false;
    }

    private void addRowData(XWPFTable table, int lastRowPosition) {
        for (int i = lastRowPosition - 1; i < tableImport1.getRowCount(); i++) {
            XWPFTableRow newRow = table.createRow();
            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                newRow.getCell(j).setText(tableImport1.getValueAt(i, j).toString());
            }

        }
    }

    private static void removeParagraphs(XWPFTableCell tableCell) {
        int count = tableCell.getParagraphs().size();
        for (int i = 0; i < count; i++) {
            tableCell.removeParagraph(i);
        }
    }

    private void setDefaultTable(XWPFTable table) {
        for (int i = 1; i < table.getRows().size(); i++) {
            table.removeRow(1);
        }
    }
    public boolean[] inserted = new boolean[100000];

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearData1;
    private javax.swing.JButton clearData2;
    private javax.swing.JLabel cost;
    private javax.swing.JTextField createDay;
    private javax.swing.JButton editData1;
    private javax.swing.JButton editData2;
    private javax.swing.JComboBox<String> employeeCombo;
    private javax.swing.JLabel employeeName;
    private javax.swing.JButton exportFile;
    private javax.swing.JTextField inputInvoice;
    private javax.swing.JButton insertData1;
    private javax.swing.JButton insertData2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JLabel lbInputInvoice;
    private javax.swing.JComboBox<String> productCombo;
    private javax.swing.JLabel productName;
    private javax.swing.JComboBox<String> properties;
    private javax.swing.JTextField quantity;
    private javax.swing.JTextField receiveDay;
    private javax.swing.JTextField searchBox;
    private javax.swing.JComboBox<String> supplierCombo;
    private javax.swing.JLabel supplierName;
    public javax.swing.JTable tableImport1;
    public javax.swing.JTable tableImport2;
    private javax.swing.JButton viewData1;
    // End of variables declaration//GEN-END:variables
}
