/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shoesmanagementcompany;

/**
 *
 * @author Đình Phúc
 */
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.TableRowAlign;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableCell;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;

public class Statistics extends javax.swing.JPanel {

    /**
     * Creates new form Statistics
     */
    private Connection conn = null;
    private PreparedStatement pst = null;
    private DefaultTableModel modelStatistic = null;
    private int sttIO = 1;

    public Statistics() {
        initComponents();
        modelStatistic = (DefaultTableModel) tableStatistics.getModel();
        ConnectionDB connectDB = new ConnectionDB();
        conn = connectDB.getConnect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Statistic = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStatistics = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        employeeCombo = new javax.swing.JComboBox<>();
        customerCombo = new javax.swing.JComboBox<>();
        supplierCombo = new javax.swing.JComboBox<>();
        productCombo = new javax.swing.JComboBox<>();
        exportCombo = new javax.swing.JComboBox<>();
        importCombo = new javax.swing.JComboBox<>();
        statisticImport = new javax.swing.JTextField();
        statisticExport = new javax.swing.JTextField();
        lbStatistic = new javax.swing.JLabel();
        jToolBar6 = new javax.swing.JToolBar();
        jButton7 = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        exportFile = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1220, 710));

        tableStatistics.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableStatistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableStatistics.setRowHeight(20);
        jScrollPane1.setViewportView(tableStatistics);

        jLabel1.setBackground(new java.awt.Color(96, 96, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(96, 96, 255));
        jLabel1.setText("Thống kê nhân viên");

        jLabel2.setBackground(new java.awt.Color(96, 96, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(96, 96, 255));
        jLabel2.setText("Thống kê khách hàng");

        jLabel3.setBackground(new java.awt.Color(96, 96, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(96, 96, 255));
        jLabel3.setText("Thống kê nhà cung cấp");

        jLabel4.setBackground(new java.awt.Color(96, 96, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(96, 96, 255));
        jLabel4.setText("Thống kê sản phẩm");

        jLabel5.setBackground(new java.awt.Color(96, 96, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(96, 96, 255));
        jLabel5.setText("Thống kê nhập hàng");

        jLabel6.setBackground(new java.awt.Color(96, 96, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(96, 96, 255));
        jLabel6.setText("Thống kê xuất hàng");

        employeeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo tên nhân viên", "Theo năm sinh", "Theo địa chỉ ", "Theo chức vụ" }));
        employeeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeComboActionPerformed(evt);
            }
        });

        customerCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo tên khách hàng", "Theo năm sinh", "Theo địa chỉ", "Theo giới tính" }));
        customerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboActionPerformed(evt);
            }
        });

        supplierCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo địa chỉ" }));
        supplierCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboActionPerformed(evt);
            }
        });

        productCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo tên sản phẩm", "Theo nhà cung cấp", "Theo nhà sản xuất", "Theo thể loại", "Theo kích thước", "Theo màu" }));
        productCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productComboActionPerformed(evt);
            }
        });

        exportCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tổng quát", "Cho nhân viên", "Cho khách hàng" }));
        exportCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportComboActionPerformed(evt);
            }
        });

        importCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tổng quát", "Cho nhân viên", "Cho nhà cung cấp" }));
        importCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importComboActionPerformed(evt);
            }
        });

        statisticImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticImportActionPerformed(evt);
            }
        });

        statisticExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticExportActionPerformed(evt);
            }
        });

        lbStatistic.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lbStatistic.setForeground(new java.awt.Color(96, 96, 255));
        lbStatistic.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbStatistic.setText("THỐNG KÊ ");

        jToolBar6.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar6.setRollover(true);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/IconColor/icons8_Combo_Chart_37px.png"))); // NOI18N
        jButton7.setToolTipText("Thống kê");
        jButton7.setOpaque(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jToolBar6.add(jButton7);

        jToolBar4.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar4.setRollover(true);

        exportFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shoesmanagementcompany/IconColor/icons8_Microsoft_Word_37px.png"))); // NOI18N
        exportFile.setToolTipText("Xuất file");
        exportFile.setOpaque(false);
        exportFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFileActionPerformed(evt);
            }
        });
        jToolBar4.add(exportFile);

        javax.swing.GroupLayout StatisticLayout = new javax.swing.GroupLayout(Statistic);
        Statistic.setLayout(StatisticLayout);
        StatisticLayout.setHorizontalGroup(
            StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatisticLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StatisticLayout.createSequentialGroup()
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(employeeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(60, 60, 60)
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(customerCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(60, 60, 60)
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productCombo, 0, 145, Short.MAX_VALUE))
                        .addGap(60, 60, 60)
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(exportCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(importCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StatisticLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(statisticImport, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                            .addGroup(StatisticLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(statisticExport))))
                    .addComponent(lbStatistic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(StatisticLayout.createSequentialGroup()
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        StatisticLayout.setVerticalGroup(
            StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatisticLayout.createSequentialGroup()
                .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StatisticLayout.createSequentialGroup()
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StatisticLayout.createSequentialGroup()
                                .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(StatisticLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(productCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(StatisticLayout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(statisticImport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(5, 5, 5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatisticLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(importCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(StatisticLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(StatisticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(statisticExport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(StatisticLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(exportCombo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbStatistic, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Statistic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Statistic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void printBorder(Graphics g) {
        super.printBorder(g); //To change body of generated methods, choose Tools | Templates.
    }

    private void removeAllRow() {
        DefaultTableModel modelDelete = (DefaultTableModel) tableStatistics.getModel();
        modelDelete.setRowCount(0);
        if (modelDelete.getRowCount() != 0) {
            modelDelete.setRowCount(0);
        }
    }

    /**
     * Hàm này sẽ làm interface cho các hàm khác
     *
     * @param sql
     * @param col
     */
    private void statistics(String sql, int col) {
        int i = 1;
        try {
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(i++ + "");
                for (int j = 1; j <= col; j++) {
                    vector.add(rs.getString(j));
                }
                modelStatistic.addRow(vector);
            }
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    private void employeeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeComboActionPerformed
        removeAllRow();
        Object obj = evt.getSource();
        String sql1 = "Select hoTen , count(hoTen) From quanlybangiay.nhanvien Group by hoTen;";
        String sql2 = "Select YEAR(ngaySinh), count(YEAR(ngaySinh)) From quanlybangiay.nhanvien Group by YEAR(ngaySinh);";
        String sql3 = "Select diaChi , count(diaChi) From quanlybangiay.nhanvien Group by diaChi;";
        String sql4 = "Select chucVu , count(chucVu) From quanlybangiay.nhanvien Group by chucVu;";
        if (obj == employeeCombo) {
            int index = employeeCombo.getSelectedIndex();
            switch (index) {
                case 0:
                    lbStatistic.setText("THỐNG KÊ NHÂN VIÊN THEO TÊN");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Họ Tên ", " Số Lượng "
                    });
                    statistics(sql1, 2);
                    break;
                case 1:
                    lbStatistic.setText("THỐNG KÊ NHÂN VIÊN THEO NĂM SINH");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Năm Sinh ", " Số Lượng "
                    });
                    statistics(sql2, 2);
                    break;
                case 2:
                    lbStatistic.setText("THỐNG KÊ NHÂN VIÊN THEO ĐỊA CHỈ");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Địa Chỉ ", " Số Lượng "
                    });
                    statistics(sql3, 2);
                    break;
                case 3:
                    lbStatistic.setText("THỐNG KÊ NHÂN VIÊN THEO CHỨC VỤ");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Chức Vụ ", " Số Lượng "
                    });
                    statistics(sql4, 2);
                    break;
            }
        }
    }//GEN-LAST:event_employeeComboActionPerformed

    private void productComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productComboActionPerformed
        removeAllRow();
        Object obj = evt.getSource();

        String sql1 = "Select tenSP, sum(soLuongCon) , sum(tongSoLuong) from quanlybangiay.sanpham group by tenSP;";

        String sql2 = "Select tenSP, maNCC , tenNCC ,   sum(soLuongCon) , sum(tongSoLuong) \n"
                + "from (quanlybangiay.sanpham as A  natural join quanlybangiay.nhacungcap as B) \n"
                + "Group by maNCC;";

        String sql3 = "Select tenSP, nhaSanXuat ,sum(soLuongCon) , sum(tongSoLuong) \n"
                + "from quanlybangiay.sanpham\n"
                + "Group by nhaSanXuat;";

        String sql4 = "Select theLoai ,sum(soLuongCon) , sum(tongSoLuong) \n"
                + "from quanlybangiay.sanpham\n"
                + "Group by theLoai;";

        String sql5 = "Select kichThuoc ,sum(soLuongCon) , sum(tongSoLuong) \n"
                + "from quanlybangiay.sanpham\n"
                + "Group by kichThuoc;";

        String sql6 = "Select mau ,sum(soLuongCon) , sum(tongSoLuong) \n"
                + "from quanlybangiay.sanpham\n"
                + "Group by mau;";

        if (obj == productCombo) {
            int index = productCombo.getSelectedIndex();
            switch (index) {
                case 0:
                    lbStatistic.setText("THỐNG KÊ SẢN PHẨM THEO TÊN SẢN PHẨM");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Tên Sản Phẩm ", " Số Lượng Còn ", " Tổng Số Lượng "
                    });
                    statistics(sql1, 3);
                    break;
                case 1:
                    lbStatistic.setText("THỐNG KÊ SẢN PHẨM THEO NHÀ CUNG CẤP");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Tên Sản Phẩm ", " Mã Nhà Cung Cấp ",
                        " Tên Nhà Cung Cấp ", "      Số Lượng Còn", " Tổng Số Lượng "
                    });
                    statistics(sql2, 5);
                    break;
                case 2:
                    lbStatistic.setText("THỐNG KÊ SẢN PHẨM THEO NHÀ SẢN XUẤT");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Tên Sản Phẩm", " Nhà Sản Xuất ", " Số Lượng Còn ", " Tổng Số Lượng "
                    });
                    statistics(sql3, 4);
                    break;
                case 3:
                    lbStatistic.setText("THỐNG KÊ SẢN PHẨM THEO THỂ LOẠI");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thể Loại", "Số Lượng Còn ", " Tổng Số Lượng "
                    });
                    statistics(sql4, 3);
                    break;
                case 4:
                    lbStatistic.setText("THỐNG KÊ SẢN PHẨM THEO KÍCH THƯỚC");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Kích Thước ", " Số Lượng Còn ", " Tổng Số Lượng "
                    });
                    statistics(sql5, 3);
                    break;
                case 5:
                    lbStatistic.setText("THỐNG KÊ SẢN PHẨM THEO MÀU SẮC");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Màu Sắc ", " Số Lượng Còn ", " Tổng Số Lượng "
                    });
                    statistics(sql6, 3);
                    break;
            }
        }
    }//GEN-LAST:event_productComboActionPerformed

    private void statisticImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticImportActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statisticImportActionPerformed

    private void statisticExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticExportActionPerformed


    }//GEN-LAST:event_statisticExportActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        new ChartFrame().setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void exportFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFileActionPerformed
        if (lbStatistic.getText().equals("THỐNG KÊ")) {
            return;
        }
        String f0 = System.getProperty("user.home");
        String f1 = "\\Documents\\NetBeansProjects\\ShoesManagementCompany\\Thống Kê\\";
        String f2 = null;
        switch (lbStatistic.getText()) {
            case "THỐNG KÊ NHÂN VIÊN THEO TÊN":
                f2 = "Thống kê nhân viên theo tên.docx";
                break;
            case "THỐNG KÊ NHÂN VIÊN THEO NĂM SINH":
                f2 = "Thống kê nhân viên theo năm sinh.docx";
                break;
            case "THỐNG KÊ NHÂN VIÊN THEO ĐỊA CHỈ":
                f2 = "Thống kê nhân viên theo địa chỉ.docx";
                break;
            case "THỐNG KÊ NHÂN VIÊN THEO CHỨC VỤ":
                f2 = "Thống kê nhân viên theo chức vụ.docx";
                break;

            case "THỐNG KÊ KHÁCH HÀNG THEO TÊN":
                f2 = "Thống kê khách hàng theo tên.docx";
                break;
            case "THỐNG KÊ KHÁCH HÀNG THEO NĂM SINH":
                f2 = "Thống kê khách hàng theo năm sinh.docx";
                break;
            case "THỐNG KÊ KHÁCH HÀNG THEO ĐỊA CHỈ":
                f2 = "Thống kê khách hàng theo địa chỉ.docx";
                break;
            case "THỐNG KÊ KHÁCH HÀNG THEO GIỚI TÍNH":
                f2 = "Thống kê khách hàng theo giới tính.docx";
                break;

            case "THỐNG KÊ NHÀ CUNG CẤP THEO ĐỊA CHỈ":
                f2 = "Thống kê nhà cung cấp theo địa chỉ.docx";
                break;

            case "THỐNG KÊ SẢN PHẨM THEO TÊN SẢN PHẨM":
                f2 = "Thống kê sản phẩm theo tên sản phẩm.docx";
                break;
            case "THỐNG KÊ SẢN PHẨM THEO NHÀ CUNG CẤP":
                f2 = "Thống kê sản phẩm theo nhà cung cấp.docx";
                break;
            case "THỐNG KÊ SẢN PHẨM THEO NHÀ SẢN XUẤT":
                f2 = "Thống kê sản phẩm theo nhà sản xuất.docx";
                break;
            case "THỐNG KÊ SẢN PHẨM THEO THỂ LOẠI":
                f2 = "Thống kê sản phẩm theo thể loại.docx";
                break;
            case "THỐNG KÊ SẢN PHẨM THEO KÍCH THƯỚC":
                f2 = "Thống kê sản phẩm theo kích thước.docx";
                break;
            case "THỐNG KÊ SẢN PHẨM THEO MÀU SẮC":
                f2 = "Thống kê sản phẩm theo màu sắc.docx";
                break;

            case "THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO CÁC NĂM":
                f2 = "Thống kê nhập hàng tổng quát theo các năm.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO CÁC THÁNG TRONG NĂM":
                f2 = "Thống kê nhập hàng tổng quát theo các tháng trong năm.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO CÁC NGÀY TRONG THÁNG":
                f2 = "Thống kê nhập hàng tổng quát theo các ngày trong tháng.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO NGÀY":
                f2 = "Thống kê nhập hàng tổng quát theo ngày.docx";
                break;

            case "THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO CÁC NĂM":
                f2 = "Thống kê nhập hàng cho nhân viên theo các năm.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO CÁC THÁNG TRONG NĂM":
                f2 = "Thống kê nhập hàng cho nhân viên theo các tháng trong năm.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO CÁC NGÀY TRONG THÁNG":
                f2 = "Thống kê nhập hàng cho nhân viên theo các ngày trong tháng.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO NGÀY":
                f2 = "Thống kê nhập hàng cho nhân viên theo ngày.docx";
                break;

            case "THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO CÁC NĂM":
                f2 = "Thống kê nhập hàng cho nhà cung cấp theo các năm.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO CÁC THÁNG TRONG NĂM":
                f2 = "Thống kê nhập hàng cho nhà cung cấp theo các tháng trong năm.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO CÁC NGÀY TRONG THÁNG":
                f2 = "Thống kê nhập hàng cho nhà cung cấp theo các ngày trong tháng.docx";
                break;
            case "THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO NGÀY":
                f2 = "Thống kê nhập hàng cho nhà cung cấp theo ngày.docx";
                break;

            case "THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO CÁC NĂM":
                f2 = "Thống kê xuất hàng tổng quát theo các năm.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO CÁC THÁNG TRONG NĂM":
                f2 = "Thống kê xuất hàng tổng quát theo các tháng trong năm.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO CÁC NGÀY TRONG THÁNG":
                f2 = "Thống kê xuất hàng tổng quát theo các ngày trong tháng.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO NGÀY":
                f2 = "Thống kê xuất hàng tổng quát theo ngày.docx";
                break;

            case "THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO CÁC NĂM":
                f2 = "Thống kê xuất hàng cho nhân viên theo các năm.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO CÁC THÁNG TRONG NĂM":
                f2 = "Thống kê xuất hàng cho nhân viên theo các tháng trong năm.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO CÁC NGÀY TRONG THÁNG":
                f2 = "Thống kê xuất hàng cho nhân viên theo các ngày trong tháng.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO NGÀY":
                f2 = "Thống kê xuất hàng cho nhân viên theo ngày.docx";
                break;

            case "THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO CÁC NĂM":
                f2 = "Thống kê xuất hàng cho khách hàng theo các năm.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO CÁC THÁNG TRONG NĂM":
                f2 = "Thống kê xuất hàng cho khách hàng theo các tháng trong năm.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO CÁC NGÀY TRONG THÁNG":
                f2 = "Thống kê xuất hàng cho khách hàng theo các ngày trong tháng.docx";
                break;
            case "THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO NGÀY":
                f2 = "Thống kê xuất hàng cho khách hàng theo ngày.docx";
                break;
        }

        String fileName = f0 + f1 + f2;

        try {
            InputStream file = new FileInputStream(fileName);
            XWPFDocument hdoc = new XWPFDocument(OPCPackage.open(file));
            Iterator bodyElementIterator = hdoc.getBodyElementsIterator();
            for (XWPFParagraph p : hdoc.getParagraphs()) {
                List<XWPFRun> runs = p.getRuns();
                if (runs != null) {
                    for (XWPFRun r : runs) {
                        r.setFontSize(12);
                        r.setFontFamily("Times New Roman");
                        String text = r.getText(0);
                        if (text != null && text.contains("ngayxxx")) {
                            SimpleDateFormat day = new SimpleDateFormat("dd");
                            SimpleDateFormat month = new SimpleDateFormat("MM");
                            SimpleDateFormat year = new SimpleDateFormat("yyyy");
                            Date date = new Date();
                            String ngay = day.format(date);
                            String thang = month.format(date);
                            String nam = year.format(date);
                            text = "Ngày  " + ngay + "  tháng  " + thang + "  năm  " + nam;
                            r.setText(text, 0);
                            break;
                        }
                    }
                }
            }
            while (bodyElementIterator.hasNext()) {
                IBodyElement element = (IBodyElement) bodyElementIterator.next();
                if ("TABLE".equalsIgnoreCase(element.getElementType().name())) {
                    //Danh sách tất cả Table trong file word
                    List<XWPFTable> tableList = element.getBody().getTables();
                    //Duyệt qua danh sách tất cả các table
                    for (XWPFTable table : tableList) {
                        //Căn bảng ở giữa file
                        table.setTableAlignment(TableRowAlign.CENTER);
                        //  Xóa các dòng thừa trước khi thêm mới
                        while (table.getRow(1) != null) {
                            table.removeRow(1);
                        }
                        //Thêm các dòng từ jTable vào table trong word
                        for (int i = 1; i <= tableStatistics.getRowCount(); i++) {
                            XWPFTableRow newRow = table.createRow();
                            for (int j = 0; j < table.getRow(i).getTableCells().size(); j++) {
                                newRow.getCell(j).setText(tableStatistics.getValueAt(i - 1, j).toString());
                            }
                        }
                    }
                }
            }
            OutputStream out = new FileOutputStream(f2);
            hdoc.write(out);
            out.close();
            //Mở file
            try {
                File myFile = new File(f0 + "\\Documents\\NetBeansProjects\\ShoesManagementCompany\\" + f2);
                Desktop.getDesktop().open(myFile);
            } catch (IOException ex) {
                // no application registered for PDFs
                JOptionPane.showConfirmDialog(null, ex.getMessage());
                ex.printStackTrace();
            }
        } catch (IOException | InvalidFormatException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportFileActionPerformed

    private void customerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboActionPerformed
        removeAllRow();
        Object obj = evt.getSource();
        String sql1 = "Select hoTen,count(hoTen) From quanlybangiay.khachhang Group by hoTen;";
        String sql2 = "Select YEAR(ngaySinh), count(YEAR(ngaySinh)) From quanlybangiay.khachhang Group by YEAR(ngaySinh);";
        String sql3 = "Select diaChi,count(diaChi) From quanlybangiay.khachhang Group by diaChi;";
        String sql4 = "Select gioiTinh,count(gioiTinh) From quanlybangiay.khachhang Group by gioiTinh;";
        if (obj == customerCombo) {
            int index = customerCombo.getSelectedIndex();
            switch (index) {
                case 0:
                    lbStatistic.setText("THỐNG KÊ KHÁCH HÀNG THEO TÊN");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Họ Tên ", " Số Lượng "
                    });
                    statistics(sql1, 2);
                    break;
                case 1:
                    lbStatistic.setText("THỐNG KÊ KHÁCH HÀNG THEO NĂM SINH");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Năm Sinh ", " Số Lượng "
                    });
                    statistics(sql2, 2);
                    break;
                case 2:
                    lbStatistic.setText("THỐNG KÊ KHÁCH HÀNG THEO ĐỊA CHỈ");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Địa Chỉ ", " Số Lượng "
                    });
                    statistics(sql3, 2);
                    break;
                case 3:
                    lbStatistic.setText("THỐNG KÊ KHÁCH HÀNG THEO GIỚI TÍNH");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Giới Tính ", " Số Lượng "
                    });
                    statistics(sql3, 2);
                    break;
            }
        }
    }//GEN-LAST:event_customerComboActionPerformed

    private void supplierComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboActionPerformed
        removeAllRow();
        Object obj = evt.getSource();
        String sql1 = "Select diaChi,count(diaChi) From quanlybangiay.nhacungcap Group by diaChi;";

        if (obj == supplierCombo) {
            int index = supplierCombo.getSelectedIndex();
            switch (index) {
                case 0:
                    lbStatistic.setText("THỐNG KÊ NHÀ CUNG CẤP THEO ĐỊA CHỈ");
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Địa Chỉ ", " Số Lượng "
                    });
                    statistics(sql1, 2);
                    break;
            }
        }
    }//GEN-LAST:event_supplierComboActionPerformed

    /**
     * .
     * Hàm này lấy các time từ ngày lập và ngày nhận or xuất
     *
     * @param sql
     * @param strTime
     * @return
     */
    private ArrayList<String> listTime(String sql, String strTime) {
        ArrayList<String> listTime = new ArrayList<>();
        Set<String> set = new HashSet<>();
        int length = strTime.length();
        try {
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                if (s1.indexOf(strTime) == 0) {
                    if (length == 0) {
                        s1 = s1.substring(0, 4);
                    } else if (length == 4) {
                        s1 = s1.substring(0, 7);
                    } else {
                        //Không làm gì cả
                    }
                    set.add(s1);
                }
                if (s2 != null && !s2.equals("0000-00-00") && s2.indexOf(strTime) == 0) {
                    if (length == 0) {
                        s2 = s2.substring(0, 4);
                    } else if (length == 4) {
                        s2 = s2.substring(0, 7);
                    } else {
                        //Không làm gì cả
                    }
                    set.add(s2);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }

        listTime.addAll(set);
        Collections.sort(listTime);
        return listTime;
    }

    /**
     * Hàm này sẽ thống kê tổng quát nhập hàng
     *
     * @param time
     */
    private void statisticImportGenerality(String time) {
        String sql1 = "select count(distinct A.maHDN) , sum(B.soLuong)\n"
                + "from quanlybangiay.hoadonnhap as A left join quanlybangiay.hoadonchitietnhap as B on A.maHDN = B.maHDN\n"
                + "where A.ngayLap like '" + time + "%';";
        String sql2 = "select sum(B.thanhTien)\n"
                + "from quanlybangiay.hoadonnhap as A left join quanlybangiay.hoadonchitietnhap as B on A.maHDN = B.maHDN\n"
                + "where A.ngayNhanHang like '" + time + "%';";
        Vector<String> vector = new Vector<>();
        try {
            pst = conn.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();
            while (rs1.next()) {
                vector.add(sttIO + "");
                vector.add(time);
                vector.add(rs1.getInt(1) + "");
                vector.add(rs1.getInt(2) + "");
            }
            pst = conn.prepareStatement(sql2);
            ResultSet rs2 = pst.executeQuery();
            while (rs2.next()) {
                vector.add(rs2.getInt(1) + "");
            }
            if (!vector.get(2).equals("0") || !vector.get(4).equals("0")) {
                modelStatistic.addRow(vector);
            }
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Hàm này thống kê tổng quát xuất hàng
     *
     * @param time
     */
    private void statisticExportGenerality(String time) {
        String sql1 = "select count(distinct A.maHDX) , sum(B.soLuong)\n"
                + "from quanlybangiay.hoadonxuat as A left join quanlybangiay.hoadonchitietxuat as B on A.maHDX = B.maHDX\n"
                + "where A.ngayLap like '" + time + "%';";
        String sql2 = "select sum(B.thanhTien)\n"
                + "from quanlybangiay.hoadonxuat as A left join quanlybangiay.hoadonchitietxuat as B on A.maHDX = B.maHDX\n"
                + "where A.ngayXuatHang like '" + time + "%';";
        Vector<String> vector = new Vector<>();
        try {
            pst = conn.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();
            while (rs1.next()) {
                vector.add(sttIO + "");
                vector.add(time);
                vector.add(rs1.getInt(1) + "");
                vector.add(rs1.getInt(2) + "");
            }
            pst = conn.prepareStatement(sql2);
            ResultSet rs2 = pst.executeQuery();
            while (rs2.next()) {
                vector.add(rs2.getInt(1) + "");
            }
            if (!vector.get(2).equals("0") || !vector.get(4).equals("0")) {
                modelStatistic.addRow(vector);
            }
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Đưa ra tên nhân viên dựa trên mã nhân viên
     *
     * @param maNV
     * @return
     */
    private String getNameEmployee(String maNV) {
        String name = null;
        String sql = "Select hoTen\n"
                + "from quanlybangiay.nhanvien\n"
                + "where maNV like '" + maNV + "';";
        try {
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                name = rs.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return name;
    }

    /**
     * Thống kê nhập hàng cho nhân viên
     *
     * @param time
     */
    private void statisticImportForEmployee(String maNV, String time) {
        String sql1 = "Select count(maNV) , sum(soLuong)\n"
                + "FROM quanlybangiay.hoadonnhap as A left join quanlybangiay.hoadonchitietnhap as B on A.maHDN = B.maHDN\n"
                + "where maNV = '" + maNV + "' and ngayLap like '" + time + "%'\n"
                + "group by maNV;";
        String sql2 = "Select sum(thanhTien)\n"
                + "from quanlybangiay.hoadonnhap as A left join quanlybangiay.hoadonchitietnhap as B on A.maHDN = B.maHDN\n"
                + "where maNV like '" + maNV + "' and ngayNhanHang like '" + time + "%';";

        try {
            Vector<String> vector = new Vector<>();
            pst = conn.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();
            String tmp = null;
            while (rs1.next()) {
                vector.add(sttIO + "");
                vector.add(time);
                vector.add(maNV);
                vector.add(getNameEmployee(maNV));
                tmp = rs1.getString(1);
                vector.add(rs1.getInt(1) + "");
                vector.add(rs1.getInt(2) + "");
            }
            pst = conn.prepareStatement(sql2);
            ResultSet rs2 = pst.executeQuery();
            while (rs2.next()) {
                if (tmp == null) {
                    vector.add(sttIO + "");
                    vector.add(time);
                    vector.add(maNV);
                    vector.add(getNameEmployee(maNV));
                    vector.add(0 + "");
                    vector.add(0 + "");
                }
                vector.add(rs2.getInt(1) + "");
            }
            modelStatistic.addRow(vector);
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Đưa ra tên nhà cung cấp
     *
     * @param maNCC
     * @return
     */
    private String getNameSupplier(String maNCC) {
        String name = null;
        String sql = "Select tenNCC\n"
                + "from quanlybangiay.nhacungcap\n"
                + "where maNCC like '" + maNCC + "';";
        try {
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                name = rs.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return name;
    }

    /**
     * Thống kê nhập hàng cho nhà cung cấp
     *
     * @param time
     */
    private void statisticImportForSupplier(String maNCC, String time) {
        String sql1 = "Select count(maNCC) , sum(soLuong)\n"
                + "FROM quanlybangiay.hoadonnhap as A left join quanlybangiay.hoadonchitietnhap as B on A.maHDN = B.maHDN\n"
                + "where maNCC = '" + maNCC + "' and ngayLap like '" + time + "%'\n"
                + "group by maNCC;";
        String sql2 = "Select sum(thanhTien)\n"
                + "from quanlybangiay.hoadonnhap as A left join quanlybangiay.hoadonchitietnhap as B on A.maHDN = B.maHDN\n"
                + "where maNCC like '" + maNCC + "' and ngayNhanHang like '" + time + "%';";
        try {
            Vector<String> vector = new Vector<>();
            pst = conn.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();
            String tmp = null;
            while (rs1.next()) {
                vector.add(sttIO + "");
                vector.add(time);
                vector.add(maNCC);
                vector.add(getNameSupplier(maNCC));
                tmp = rs1.getString(1);
                vector.add(rs1.getInt(1) + "");
                vector.add(rs1.getInt(2) + "");
            }
            pst = conn.prepareStatement(sql2);
            ResultSet rs2 = pst.executeQuery();
            while (rs2.next()) {
                if (tmp == null) {
                    vector.add(sttIO + "");
                    vector.add(time);
                    vector.add(maNCC);
                    vector.add(getNameSupplier(maNCC));
                    vector.add(0 + "");
                    vector.add(0 + "");
                }
                vector.add(rs2.getInt(1) + "");
            }
            modelStatistic.addRow(vector);
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Thống kê xuất hàng cho nhân viên
     *
     * @param maNV
     * @param time
     */
    private void statisticExportForEmployee(String maNV, String time) {
        String sql1 = "Select count(maNV) , sum(soLuong)\n"
                + "FROM quanlybangiay.hoadonxuat as A left join quanlybangiay.hoadonchitietxuat as B on A.maHDX = B.maHDX\n"
                + "where maNV = '" + maNV + "' and ngayLap like '" + time + "%'\n"
                + "group by maNV;";
        String sql2 = "Select sum(thanhTien)\n"
                + "from quanlybangiay.hoadonxuat as A left join quanlybangiay.hoadonchitietxuat as B on A.maHDX = B.maHDX\n"
                + "where maNV like '" + maNV + "' and ngayXuatHang like '" + time + "%';";

        try {
            Vector<String> vector = new Vector<>();
            pst = conn.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();
            String tmp = null;
            while (rs1.next()) {
                vector.add(sttIO + "");
                vector.add(time);
                vector.add(maNV);
                vector.add(getNameEmployee(maNV));
                tmp = rs1.getString(1);
                vector.add(rs1.getInt(1) + "");
                vector.add(rs1.getInt(2) + "");
            }
            pst = conn.prepareStatement(sql2);
            ResultSet rs2 = pst.executeQuery();
            while (rs2.next()) {
                if (tmp == null) {
                    vector.add(sttIO + "");
                    vector.add(time);
                    vector.add(maNV);
                    vector.add(getNameEmployee(maNV));
                    vector.add(0 + "");
                    vector.add(0 + "");
                }
                vector.add(rs2.getInt(1) + "");
            }
            modelStatistic.addRow(vector);
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Đưa ra tên của khách hàng
     *
     * @param maKH
     * @return
     */
    private String getNameCustomer(String maKH) {
        String name = null;
        String sql = "Select hoTen\n"
                + "from quanlybangiay.khachhang\n"
                + "where maKH like '" + maKH + "';";
        try {
            pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                name = rs.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
        return name;
    }

    /**
     * Thống kê xuất hàng cho khách hàng
     *
     * @param maKH
     * @param time
     */
    private void statisticExportForCustomer(String maKH, String time) {
        String sql1 = "Select count(maKH) , sum(soLuong)\n"
                + "FROM quanlybangiay.hoadonxuat as A left join quanlybangiay.hoadonchitietxuat as B on A.maHDX = B.maHDX\n"
                + "where maKH = '" + maKH + "' and ngayLap like '" + time + "%'\n"
                + "group by maKH;";
        String sql2 = "Select sum(thanhTien)\n"
                + "from quanlybangiay.hoadonxuat as A left join quanlybangiay.hoadonchitietxuat as B on A.maHDX = B.maHDX\n"
                + "where maKH like '" + maKH + "' and ngayXuatHang like '" + time + "%';";
        try {
            Vector<String> vector = new Vector<>();
            pst = conn.prepareStatement(sql1);
            ResultSet rs1 = pst.executeQuery();
            String tmp = null;
            while (rs1.next()) {
                vector.add(sttIO + "");
                vector.add(time);
                vector.add(maKH);
                vector.add(getNameCustomer(maKH));
                tmp = rs1.getString(1);
                vector.add(rs1.getInt(1) + "");
                vector.add(rs1.getInt(2) + "");
            }
            pst = conn.prepareStatement(sql2);
            ResultSet rs2 = pst.executeQuery();
            while (rs2.next()) {
                if (tmp == null) {
                    vector.add(sttIO + "");
                    vector.add(time);
                    vector.add(maKH);
                    vector.add(getNameCustomer(maKH));
                    vector.add(0 + "");
                    vector.add(0 + "");
                }
                vector.add(rs2.getInt(1) + "");
            }
            modelStatistic.addRow(vector);
        } catch (SQLException ex) {
            JOptionPane.showConfirmDialog(null, "Error " + ex.getMessage());
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void importComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importComboActionPerformed
        removeAllRow();
        sttIO = 0;
        ArrayList<String> listTime = this.listTime("select ngayLap,ngayNhanHang From quanlybangiay.hoadonnhap;",
                statisticImport.getText());
        int length = statisticImport.getText().length();
        Object obj = evt.getSource();
        if (obj == importCombo) {
            int index = importCombo.getSelectedIndex();
            switch (index) {
                case 0:
                    if (length == 0) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO CÁC NĂM");
                    } else if (length == 4) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO CÁC THÁNG TRONG NĂM");
                    } else if (length == 7) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO CÁC NGÀY TRONG THÁNG");
                    } else if (length == 10) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG TỔNG QUÁT THEO NGÀY");
                    } else {
                        JOptionPane.showMessageDialog(null, "Bạn đã nhập sai. Vui lòng nhập lại theo đúng định dạng.");
                    }
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thời gian ", " Số hóa đơn ", " Tổng sản phẩm ", " Tổng tiền "
                    });

                    for (String time : listTime) {
                        sttIO++;
                        statisticImportGenerality(time);
                    }
                    break;
                case 1:
                    if (length == 0) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO CÁC NĂM");
                    } else if (length == 4) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO CÁC THÁNG TRONG NĂM");
                    } else if (length == 7) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO CÁC NGÀY TRONG THÁNG");
                    } else if (length == 10) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÂN VIÊN THEO NGÀY");
                    } else {
                        JOptionPane.showMessageDialog(null, "Bạn đã nhập sai. Vui lòng nhập lại theo đúng định dạng.");
                    }
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thời gian ", " Mã nhân viên ", "Tên nhân viên", "Số hóa đơn", "Tổng sản phẩm", "Tổng tiền"
                    });
                    for (String time : listTime) {

                        String sql = "Select distinct maNV "
                                + "from quanlybangiay.hoadonnhap "
                                + "where ngayLap like '" + time + "%' "
                                + "or ngayNhanHang like '" + time + "%'";
                        try {
                            pst = conn.prepareStatement(sql);
                            ResultSet rs = pst.executeQuery();
                            while (rs.next()) {
                                sttIO++;
                                statisticImportForEmployee(rs.getString(1), time);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    break;
                case 2:
                    if (length == 0) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO CÁC NĂM");
                    } else if (length == 4) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO CÁC THÁNG TRONG NĂM");
                    } else if (length == 7) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO CÁC NGÀY TRONG THÁNG");
                    } else if (length == 10) {
                        lbStatistic.setText("THỐNG KÊ NHẬP HÀNG CHO NHÀ CUNG CẤP THEO NGÀY");
                    } else {
                        JOptionPane.showMessageDialog(null, "Bạn đã nhập sai. Vui lòng nhập lại theo đúng định dạng.");
                    }
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thời gian ", " Mã nhà cung cấp ", "Tên nhà cung cấp", "Số hóa đơn", "Tổng sản phẩm", "Tổng tiền"
                    });
                    for (String time : listTime) {
                        String sql = "Select distinct maNCC "
                                + "from quanlybangiay.hoadonnhap "
                                + "where ngayLap like '" + time + "%' "
                                + "or ngayNhanHang like '" + time + "%'";
                        try {
                            pst = conn.prepareStatement(sql);
                            ResultSet rs = pst.executeQuery();
                            while (rs.next()) {
                                sttIO++;
                                statisticImportForSupplier(rs.getString(1), time);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    break;
            }
        }

    }//GEN-LAST:event_importComboActionPerformed

    private void exportComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportComboActionPerformed
        removeAllRow();
        sttIO = 0;
        ArrayList<String> listTime = this.listTime("select ngayLap,ngayXuatHang From quanlybangiay.hoadonxuat;",
                statisticExport.getText());
        Object obj = evt.getSource();
        String sql1 = "";
        String sql2 = "";
        String sql3 = "";
        String sql4 = "";
        int length = statisticExport.getText().length();
        if (obj == exportCombo) {
            int index = exportCombo.getSelectedIndex();
            switch (index) {
                case 0:
                    if (length == 0) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO CÁC NĂM");
                    } else if (length == 4) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO CÁC THÁNG TRONG NĂM");
                    } else if (length == 7) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO CÁC NGÀY TRONG THÁNG");
                    } else if (length == 10) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG TỔNG QUÁT THEO NGÀY");
                    } else {
                        JOptionPane.showMessageDialog(null, "Bạn đã nhập sai. Vui lòng nhập lại theo đúng định dạng.");
                    }
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thời gian ", " Số hóa đơn ", " Tổng sản phẩm ", " Tổng tiền "
                    });
                    for (String time : listTime) {
                        sttIO++;
                        statisticExportGenerality(time);
                    }
                    break;
                case 1:
                    if (length == 0) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO CÁC NĂM");
                    } else if (length == 4) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO THEO CÁC THÁNG TRONG NĂM");
                    } else if (length == 7) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO CÁC NGÀY TRONG THÁNG");
                    } else if (length == 10) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO NHÂN VIÊN THEO NGÀY");
                    } else {
                        JOptionPane.showMessageDialog(null, "Bạn đã nhập sai. Vui lòng nhập lại theo đúng định dạng.");
                    }
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thời gian ", " Mã nhà cung cấp ", "Tên nhân viên", "Số hóa đơn", "Tổng sản phẩm", "Tổng tiền"
                    });
                    for (String time : listTime) {
                        String sql = "Select distinct maNV "
                                + "from quanlybangiay.hoadonxuat "
                                + "where ngayLap like '" + time + "%' "
                                + "or ngayXuatHang like '" + time + "%'";
                        try {
                            pst = conn.prepareStatement(sql);
                            ResultSet rs = pst.executeQuery();
                            while (rs.next()) {
                                sttIO++;
                                statisticExportForEmployee(rs.getString(1), time);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    break;
                case 2:
                    if (length == 0) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO CÁC NĂM");
                    } else if (length == 4) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO CÁC THÁNG TRONG NĂM");
                    } else if (length == 7) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO CÁC NGÀY TRONG THÁNG");
                    } else if (length == 10) {
                        lbStatistic.setText("THỐNG KÊ XUẤT HÀNG CHO KHÁCH HÀNG THEO NGÀY");
                    } else {
                        JOptionPane.showMessageDialog(null, "Bạn đã nhập sai. Vui lòng nhập lại theo đúng định dạng.");
                    }
                    modelStatistic.setColumnIdentifiers(new Object[]{
                        " STT ", " Thời gian ", " Mã khách hàng ", " Tên khách hàng ", "Số hóa đơn", "Tổng sản phẩm", " Tổng tiền "
                    });
                    for (String time : listTime) {
                        String sql = "Select distinct maKH "
                                + "from quanlybangiay.hoadonxuat "
                                + "where ngayLap like '" + time + "%' "
                                + "or ngayXuatHang like '" + time + "%'";
                        try {
                            pst = conn.prepareStatement(sql);
                            ResultSet rs = pst.executeQuery();
                            while (rs.next()) {
                                sttIO++;
                                statisticExportForCustomer(rs.getString(1), time);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    break;
            }
        }
    }//GEN-LAST:event_exportComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Statistic;
    private javax.swing.JComboBox<String> customerCombo;
    private javax.swing.JComboBox<String> employeeCombo;
    private javax.swing.JComboBox<String> exportCombo;
    private javax.swing.JButton exportFile;
    private javax.swing.JComboBox<String> importCombo;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JLabel lbStatistic;
    private javax.swing.JComboBox<String> productCombo;
    private javax.swing.JTextField statisticExport;
    private javax.swing.JTextField statisticImport;
    private javax.swing.JComboBox<String> supplierCombo;
    private javax.swing.JTable tableStatistics;
    // End of variables declaration//GEN-END:variables
}
